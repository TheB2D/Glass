<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Photo Viewer</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background-color: #000;
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      font-family: Arial, sans-serif;
    }

    .photo-container {
      max-width: 100vw;
      max-height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .photo {
      max-width: 100%;
      max-height: 100%;
      object-fit: contain;
      border-radius: 8px;
    }

    .no-photo {
      color: white;
      text-align: center;
      font-size: 18px;
    }

    .loading {
      color: white;
      text-align: center;
      font-size: 16px;
    }

    .toggle-button {
      position: fixed;
      top: 20px;
      right: 20px;
      background-color: #333;
      color: white;
      border: none;
      padding: 12px 24px;
      border-radius: 25px;
      cursor: pointer;
      font-size: 16px;
      z-index: 100;
    }

    .toggle-button.active {
      background-color: #28a745;
    }
  </style>
</head>
<body>
  <button id="toggle-streaming" class="toggle-button">Start Streaming</button>
  
  <div class="photo-container">
    <div id="content" class="loading">Loading latest photo...</div>
  </div>

  <script>
    let currentRequestId = null;
    let isStreaming = false;

    /**
     * Toggle streaming mode
     */
    async function toggleStreaming() {
      try {
        const response = await fetch('/api/toggle-streaming', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' }
        });

        if (!response.ok) {
          throw new Error('Failed to toggle streaming');
        }

        const result = await response.json();
        updateStreamingUI(result.isStreaming);
        
      } catch (error) {
        console.error('Error toggling streaming:', error);
      }
    }

    /**
     * Update UI based on streaming state
     */
    function updateStreamingUI(streaming) {
      isStreaming = streaming;
      const button = document.getElementById('toggle-streaming');

      if (streaming) {
        button.classList.add('active');
        button.textContent = 'Stop Streaming';
      } else {
        button.classList.remove('active');
        button.textContent = 'Start Streaming';
      }
    }

    /**
     * Check for new photos and update display
     */
    async function checkForNewPhoto() {
      try {
        const response = await fetch('/api/latest-photo');

        if (response.status === 404) {
          // No photo available
          document.getElementById('content').innerHTML =
            '<div class="no-photo">No photos taken yet. Take a photo using your Mentra Live by pressing the right button!</div>';
          return;
        }

        if (!response.ok) {
          throw new Error('Failed to fetch photo info');
        }

        const photoInfo = await response.json();

        // Update streaming state
        updateStreamingUI(photoInfo.isStreaming);

        // Check if this is a new photo
        if (photoInfo.requestId !== currentRequestId) {
          currentRequestId = photoInfo.requestId;

          // Update the display with new photo
          document.getElementById('content').innerHTML =
            '<img class="photo" src="/api/photo/' + photoInfo.requestId + '" alt="Latest Photo" />';
        }
      } catch (error) {
        console.error('Error checking for new photo:', error);
        document.getElementById('content').innerHTML =
          '<div class="no-photo">Error loading photo. Please refresh the page.</div>';
      }
    }

    // Set up event listeners
    document.getElementById('toggle-streaming').addEventListener('click', toggleStreaming);

    // Check for new photos every 500ms (twice per second)
    checkForNewPhoto(); // Initial check
    setInterval(checkForNewPhoto, 500);
  </script>
</body>
</html>